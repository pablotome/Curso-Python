There are many options for development environments for Python, and I’m often
asked which one I use in my own work. My answer sometimes surprises people: my
preferred environment is IPython plus a text editor (in my case, Emacs or Atom
depending on my mood). IPython (short for Interactive Python) was started in 2001
by Fernando Perez as an enhanced Python interpreter, and has since grown into a
project aiming to provide, in Perez’s words, “Tools for the entire lifecycle of research
computing.” If Python is the engine of our data science task, you might think of IPy‐
thon as the interactive control panel.
As well as being a useful interactive interface to Python, IPython also provides a
number of useful syntactic additions to the language; we’ll cover the most useful of
these additions here. In addition, IPython is closely tied with the Jupyter project,
which provides a browser-based notebook that is useful for development, collabora‐
tion, sharing, and even publication of data science results. The IPython notebook is
actually a special case of the broader Jupyter notebook structure, which encompasses
notebooks for Julia, R, and other programming languages. As an example of the use‐
fulness of the notebook format, look no further than the page you are reading: the
entire manuscript for this book was composed as a set of IPython notebooks.
IPython is about using Python effectively for interactive scientific and data-intensive
computing. This chapter will start by stepping through some of the IPython features
that are useful to the practice of data science, focusing especially on the syntax it
offers beyond the standard features of Python. Next, we will go into a bit more depth
on some of the more useful “magic commands” that can speed up common tasks in
creating and using data science code. Finally, we will touch on some of the features of
the notebook that make it useful in understanding data and sharing results.
